export const validationRules: Record<string, RegExp> = {
    first_name: /^[A-Z–ê-–Ø][a-zA-Z–∞-—è–ê-–Ø-]*$/,
    second_name: /^[A-Z–ê-–Ø][a-zA-Z–∞-—è–ê-–Ø-]*$/,
    login: /^(?!\d+$)[a-zA-Z0-9_-]{3,20}$/,
    email: /^[a-zA-Z0-9._-]+@[a-zA-Z]+\.[a-zA-Z]{2,}$/,
    password: /^(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,40}$/,
    oldPassword: /^(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,40}$/,
    newPassword: /^(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,40}$/,
    phone: /^\+?\d{10,15}$/,
    message: /^(?!\s*$).+/,
};

export const errorMessages: Record<string, string> = {
    first_name: '–ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏–ª–∏ –¥–µ—Ñ–∏—Å',
    second_name: '–ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏–ª–∏ –¥–µ—Ñ–∏—Å',
    login: '–û—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤, –ª–∞—Ç–∏–Ω–∏—Ü–∞, —Ü–∏—Ñ—Ä—ã, - –∏–ª–∏ _',
    email: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email',
    password: '–û—Ç 8 –¥–æ 40 —Å–∏–º–≤–æ–ª–æ–≤, —Ö–æ—Ç—è –±—ã 1 –∑–∞–≥–ª–∞–≤–Ω–∞—è –∏ —Ü–∏—Ñ—Ä–∞',
    oldPassword: '–û—Ç 8 –¥–æ 40 —Å–∏–º–≤–æ–ª–æ–≤, —Ö–æ—Ç—è –±—ã 1 –∑–∞–≥–ª–∞–≤–Ω–∞—è –∏ —Ü–∏—Ñ—Ä–∞',
    newPassword: '–û—Ç 8 –¥–æ 40 —Å–∏–º–≤–æ–ª–æ–≤, —Ö–æ—Ç—è –±—ã 1 –∑–∞–≥–ª–∞–≤–Ω–∞—è –∏ —Ü–∏—Ñ—Ä–∞',
    phone: '–û—Ç 10 –¥–æ 15 —Ü–∏—Ñ—Ä, –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å +',
    message: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º',
};

export const initFieldValidation = (fieldId: string) => {
    const input = document.getElementById(fieldId) as HTMLInputElement | null;
    if (!input) {
        console.warn(`‚ö†Ô∏è –ü–æ–ª–µ —Å id ${fieldId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ DOM`);
        return;
    }

    const errorContainer = document.getElementById(`${fieldId}-error`);

    const validate = () => {
        const rule = validationRules[fieldId];
        if (!rule) {
            console.log(`‚ö†Ô∏è –î–ª—è –ø–æ–ª—è ${fieldId} –Ω–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏`);
            return '';
        }

        const value = input.value.trim();

        if (!rule.test(value)) {
            input.classList.add('invalid');
            if (errorContainer) {
                errorContainer.textContent =
                    errorMessages[fieldId] || '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ';
            }
            console.log(`‚ùå –ü–æ–ª–µ ${fieldId} –Ω–µ–≤–∞–ª–∏–¥–Ω–æ: ${value}`);
            return errorMessages[fieldId] || '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ';
        } else {
            input.classList.remove('invalid');
            if (errorContainer) {
                errorContainer.textContent = '';
            }
            console.log(`‚úÖ –ü–æ–ª–µ ${fieldId} –≤–∞–ª–∏–¥–Ω–æ: ${value}`);
            return '';
        }
    };

    input.addEventListener('blur', validate);

    return validate;
};

window.addEventListener('DOMContentLoaded', () => {
    const validators = [
        initFieldValidation('password'),
        initFieldValidation('login'),
        initFieldValidation('phone'),
        initFieldValidation('second_name'),
        initFieldValidation('first_name'),
        initFieldValidation('email'),
        initFieldValidation('message'),
        initFieldValidation('oldPassword'),
        initFieldValidation('newPassword'),
    ];

    const form = document.getElementById('myForm');

    if (form instanceof HTMLFormElement) {
        form.addEventListener('submit', (e) => {
            e.preventDefault();

            const errors = validators
                .map((fn) => (fn ? fn() : ''))
                .filter((msg) => msg !== '');

            if (errors.length > 0) {
                console.log('‚ùå –§–æ—Ä–º–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏:\n' + errors.join('\n'));
            } else {
                const formData = new FormData(form); // —Ç—É—Ç —É–∂–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ
                const data: Record<string, string> = {};
                formData.forEach((val, key) => {
                    data[key] = val.toString();
                });
                console.log('‚úÖ –§–æ—Ä–º–∞ –≤–∞–ª–∏–¥–Ω–∞!');
                console.log('üì¶ –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', data);
            }
        });
    } else {
        console.warn('‚õî –≠–ª–µ–º–µ–Ω—Ç —Å id="myForm" –Ω–µ —è–≤–ª—è–µ—Ç—Å—è <form>');
    }
});
